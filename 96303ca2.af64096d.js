(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{123:function(e,r,t){"use strict";t.d(r,"a",(function(){return u})),t.d(r,"b",(function(){return g}));var n=t(0),a=t.n(n);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),p=function(e){var r=a.a.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},u=function(e){var r=p(e.components);return a.a.createElement(c.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return a.a.createElement(a.a.Fragment,{},r)}},b=a.a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),b=n,g=u["".concat(i,".").concat(b)]||u[b]||d[b]||o;return t?a.a.createElement(g,l(l({ref:r},c),{},{components:t})):a.a.createElement(g,l({ref:r},c))}));function g(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=t.length,i=new Array(o);i[0]=b;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},125:function(e,r,t){"use strict";var n=t(0),a=t.n(n);r.a=({src:e,alt:r,title:t})=>a.a.createElement("div",{className:"imageContainer"},a.a.createElement("div",{className:"center"},a.a.createElement("img",{src:e,alt:r})),a.a.createElement("div",{className:"center"},t))},96:function(e,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return l})),t.d(r,"metadata",(function(){return s})),t.d(r,"toc",(function(){return c})),t.d(r,"default",(function(){return u}));var n=t(3),a=t(7),o=(t(0),t(123)),i=t(125),l={slug:"private-queries-with-apollo-server-express",title:"Private queries with Apollo Server and Express",tags:["apollo-server","expressjs","error 401","typescript","exception"],image:"https://albertcito.com/img/blog/auth-graphql.png"},s={permalink:"/blog/private-queries-with-apollo-server-express",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/blog/blog/2021-01-03-private-queries-with-apollo-server-express.mdx",source:"@site/blog/2021-01-03-private-queries-with-apollo-server-express.mdx",description:"I other post I was using a private and public schema to return 401 http status. But I found a better solution to change the response http status from the server.",date:"2021-01-03T00:00:00.000Z",tags:[{label:"apollo-server",permalink:"/blog/tags/apollo-server"},{label:"expressjs",permalink:"/blog/tags/expressjs"},{label:"error 401",permalink:"/blog/tags/error-401"},{label:"typescript",permalink:"/blog/tags/typescript"},{label:"exception",permalink:"/blog/tags/exception"}],title:"Private queries with Apollo Server and Express",readingTime:1.45,truncated:!0,nextItem:{title:"Package to use decorators with validatorJS",permalink:"/blog/package-decorators-validatorjs"}},c=[{value:"Create Exception",id:"create-exception",children:[]},{value:"Create Apollo Middleware",id:"create-apollo-middleware",children:[]},{value:"Create query only access for authenticated users",id:"create-query-only-access-for-authenticated-users",children:[]},{value:"Intercept Error in global handle exception",id:"intercept-error-in-global-handle-exception",children:[]},{value:"Add logic to Apollo Server",id:"add-logic-to-apollo-server",children:[]}],p={toc:c};function u(e){var r=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},p,t,{components:r,mdxType:"MDXLayout"}),Object(o.b)("p",null,"I ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/blog/public-private-schema-with-apollo-server-express"}),"other post")," I was using a private and public schema to return 401 http status. But I found a better solution to change the response http status from the server."),Object(o.b)(i.a,{src:"/img/blog/auth-graphql.png",alt:"Apollo Server query with authenticate user",title:"Apollo Server query with authenticate user",mdxType:"Image"}),Object(o.b)("h2",{id:"create-exception"},"Create Exception"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"class HttpStatusError extends Error {\n  constructor(\n    public readonly message: string,\n    public readonly code: number = 401,\n  ) {\n    super();\n    Object.setPrototypeOf(this, HttpStatusError.prototype);\n  }\n}\n")),Object(o.b)("h2",{id:"create-apollo-middleware"},"Create Apollo Middleware"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript",metastring:"{4}","{4}":!0}),"const isAuth: MiddlewareFn<{ req: Request}> = async ({ context: { req } }, next) => {\n  // Your own isAdmin function\n  if (!isAdmin(req)) {\n    throw new HttpStatusError('Not authorized, please login');\n  }\n  return next();\n};\n")),Object(o.b)("h2",{id:"create-query-only-access-for-authenticated-users"},"Create query only access for authenticated users"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript",metastring:"{4}","{4}":!0}),"@Resolver()\nclass LangDeleteResolver {\n  @Mutation(() => String)\n  @UseMiddleware(isAuth)\n  @Validate({ id: 'required|string' })\n  async langDelete(@Arg('id') id: string): Promise<string> {\n    const lang = await Lang.findOneOrFail(id);\n    await lang.remove();\n    return __('The item %s was removed');\n  }\n}\n")),Object(o.b)("h2",{id:"intercept-error-in-global-handle-exception"},"Intercept Error in global handle exception"),Object(o.b)("p",null,"So the ",Object(o.b)("inlineCode",{parentName:"p"},"ErrorHandlePlugin")," will be the function to determine if the server response http status."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript",metastring:"{10}","{10}":!0}),"const ErrorHandlePlugin: ApolloServerPlugin = {\n  requestDidStart() {\n    return {\n      willSendResponse(requestContext: GraphQLRequestContextWillSendResponse<ApolloServerContext>) {\n        const errors = requestContext.errors ?? [];\n        // eslint-disable-next-line no-restricted-syntax\n        for (const error of errors) {\n          const { originalError } = error;\n          if (originalError instanceof HttpStatusError) {\n            throw new HttpQueryError(originalError.code, originalError.message, false);\n          }\n          if (originalError && !isValidException(originalError)) {\n            notify(originalError, requestContext.context.req);\n          }\n        }\n      },\n    };\n  },\n};\n")),Object(o.b)("h2",{id:"add-logic-to-apollo-server"},"Add logic to Apollo Server"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript",metastring:"{5}","{5}":!0}),"const apolloServer = new ApolloServer({\n  schema: apolloSchema,\n  context: ({ req, res }): ApolloServerContext => ({ db, req, res }),\n  formatError,\n  plugins: [ErrorHandlePlugin],\n  playground: true,\n  introspection: true,\n});\n")),Object(o.b)("p",null,"You can see the code in my ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/albertcito/nodejs-web-typescript"}),"repo"),"."))}u.isMDXComponent=!0}}]);