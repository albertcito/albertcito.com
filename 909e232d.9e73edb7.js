(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{62:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return p})),t.d(a,"metadata",(function(){return c})),t.d(a,"rightToc",(function(){return s})),t.d(a,"default",(function(){return o}));var n=t(2),l=t(6),r=(t(0),t(76)),i=t(77),p={id:"basic-example-laravel-graphql",title:"Basic example Laravel + GraphQL",tags:["php","laravel","graphql"],image:"https://lh4.googleusercontent.com/GnJtblq8JZezKOnenXQkGYn0R-sOGNJy8n7Twzzdj6JcKnMDWW9AtsvhbfG3X_dixs8jYbGgoe8RopGleb8J=w2560-h1450-rw"},c={permalink:"/blog/basic-example-laravel-graphql",source:"@site/blog/2020-08-27-basic-example-laravel-graphql.mdx",description:"Laravel GraphQL is a implementation of GraphQL with PHP for Laravel. Very easy to install and use. So the plan in this post is to create langs query and see it in Graphiql.",date:"2020-08-27T00:00:00.000Z",tags:[{label:"php",permalink:"/blog/tags/php"},{label:"laravel",permalink:"/blog/tags/laravel"},{label:"graphql",permalink:"/blog/tags/graphql"}],title:"Basic example Laravel + GraphQL",truncated:!0,nextItem:{title:"Private and Different Layouts with React Router",permalink:"/blog/private-different-layouts-with-react-router"}},s=[{value:"1. Install library:",id:"1-install-library",children:[]},{value:"2. Create the migration and the model:",id:"2-create-the-migration-and-the-model",children:[{value:"Create the Migration",id:"create-the-migration",children:[]},{value:"Create the Model",id:"create-the-model",children:[]}]},{value:"3. Create the GraphQL Lang Type",id:"3-create-the-graphql-lang-type",children:[]},{value:"4. Create the query",id:"4-create-the-query",children:[]},{value:"5. Add the query and type to the config file",id:"5-add-the-query-and-type-to-the-config-file",children:[]}],b={rightToc:s};function o(e){var a=e.components,t=Object(l.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},b,t,{components:a,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/rebing/graphql-laravel"}),"Laravel GraphQL")," is a implementation of GraphQL with PHP for Laravel. Very easy to install and use. So the plan in this post is to create ",Object(r.b)("inlineCode",{parentName:"p"},"langs")," query and see it in Graphiql."),Object(r.b)(i.a,{src:"https://cdn-images-1.medium.com/max/1600/1*6UZ-T5DS_OuxnWoEND8QSw.png",alt:"Langs query working in Laravel GraphQL library",title:"Langs query working in Laravel GraphQL library",mdxType:"Image"}),Object(r.b)("h2",{id:"1-install-library"},"1. Install library:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/rebing/graphql-laravel"}),"Laravel GraphQL")," library.")),Object(r.b)("h2",{id:"2-create-the-migration-and-the-model"},"2. Create the migration and the model:"),Object(r.b)("h3",{id:"create-the-migration"},"Create the Migration"),Object(r.b)("p",null,"I'm using PostgreSQL."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"// database/migrations/2014_02_24_195921_Lang.php\n\nSchema::create('lang.lang', function (Blueprint $table) {\n    $table->string('lang_id', 50)->primary();\n    $table->string('name')->unique();\n    $table->string('local_name')->unique();\n    $table->boolean('active')->default(false);\n    $table->boolean('is_blocked')->default(false);\n\n    $table->integer('created_by')->nullable();\n    $table->integer('updated_by')->nullable();\n    $table->timestamp('created_at')->default(DB::raw('CURRENT_TIMESTAMP'));\n    $table->timestamp('updated_at')->default(DB::raw('CURRENT_TIMESTAMP'));\n});\n\nDB::table($this->tableName)->insert([\n    ['lang_id' => 'EN', 'name' => 'English', 'local_name' => 'English', 'active' => true],\n    ['lang_id' => 'ES', 'name' => 'Spanish', 'local_name' => 'Espa\xf1ol', 'active' => true],\n]);\n")),Object(r.b)("h3",{id:"create-the-model"},"Create the Model"),Object(r.b)("p",null,"I created the class BaseModel to save the ",Object(r.b)("inlineCode",{parentName:"p"},"created_by")," and ",Object(r.b)("inlineCode",{parentName:"p"},"updated_by")," fields in the database."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"// app/Base/Model/Lang/Lang.php\n\nclass Lang extends BaseModel\n{\n    public $incrementing = false;\n\n    protected $table = 'lang.lang';\n\n    protected $primaryKey = 'lang_id';\n\n    protected $fillable = [\n        'lang_id',\n        'name',\n        'local_name',\n        'active',\n        'is_blocked',\n        'created_by',\n    ];\n}\n")),Object(r.b)("h2",{id:"3-create-the-graphql-lang-type"},"3. Create the GraphQL Lang Type"),Object(r.b)("p",null,"This file has the columns to return as the JSON variables. You can see ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/albertcito/laravel-graphql-api/blob/master/app/Base/GraphQL/Type/LangType.php"}),"whole file")," in github."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"// app/Base/GraphQL/Type/LangType.php\n\nprotected $attributes = [\n    'name'        => 'LangType',\n    'description' => 'A Lang type',\n];\n\npublic function fields() : array\n{\n    return [\n        'langID'    => [\n            'type'        => Type::nonNull(Type::string()),\n            'description' => 'The lang ID',\n            'alias' => 'lang_id',\n        ],\n        'name'      => [\n            'type'        => Type::nonNull(Type::string()),\n            'description' => 'The lang name (english, spanish...)',\n        ],\n        ...\n    ];\n}\n")),Object(r.b)("h2",{id:"4-create-the-query"},"4. Create the query"),Object(r.b)("p",null,"This is the basic example to return all the columns of the ",Object(r.b)("inlineCode",{parentName:"p"},"lang.lang")," table."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"class LangsQuery extends Query\n{\n    protected $attributes = [\n        'name'        => 'langs',\n        'description' => 'A query to get the Langs',\n    ];\n\n    public function type(): Type\n    {\n        return GraphQL::listOf('LangType');\n    }\n\n    public function args(): array\n    {\n        return [];\n    }\n\n    public function resolve($root, array $args)\n    {\n        return Lang::all();\n    }\n}\n")),Object(r.b)("h2",{id:"5-add-the-query-and-type-to-the-config-file"},"5. Add the query and type to the config file"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"// config/graphql.php\n...\n'schemas' => [\n    'default' => [\n        'query' => [\n            App\\Base\\GraphQL\\Publics\\Query\\LangsQuery::class,\n        ],\n        'mutation' => [],\n        'middleware' => [],\n        'method' => ['get', 'post'],\n    ],\n],\n'types' => [\n    \\App\\Base\\GraphQL\\Type\\LangType::class,\n]\n...\n")),Object(r.b)("p",null,"Now you can go to ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"http://127.0.0.1:8000/graphiql/"}),"http://127.0.0.1:8000/graphiql/")," and run the query and see the DB values in JSON format."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"{\n  langs {\n    langID\n    name\n    localName\n    active \n  }\n}\n")),Object(r.b)("p",null,"This is a very basic query. To make it better you have to work with the arguments and pagination. I already did it, so if you go to my ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/albertcito/laravel-graphql-api"}),"laravel-graphql-api")," repository you can see it."))}o.isMDXComponent=!0},77:function(e,a,t){"use strict";var n=t(0),l=t.n(n);a.a=({src:e,alt:a,title:t})=>l.a.createElement("div",{className:"imageContainer"},l.a.createElement("div",{className:"center"},l.a.createElement("img",{src:e,alt:a})),l.a.createElement("div",{className:"center"},t))}}]);