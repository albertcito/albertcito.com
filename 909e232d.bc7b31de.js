(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{123:function(e,a,t){"use strict";t.d(a,"a",(function(){return b})),t.d(a,"b",(function(){return g}));var n=t(0),r=t.n(n);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function p(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function c(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=r.a.createContext({}),s=function(e){var a=r.a.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):p(p({},a),e)),t},b=function(e){var a=s(e.components);return r.a.createElement(o.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},h=r.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,o=c(e,["components","mdxType","originalType","parentName"]),b=s(t),h=n,g=b["".concat(i,".").concat(h)]||b[h]||u[h]||l;return t?r.a.createElement(g,p(p({ref:a},o),{},{components:t})):r.a.createElement(g,p({ref:a},o))}));function g(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var l=t.length,i=new Array(l);i[0]=h;var p={};for(var c in a)hasOwnProperty.call(a,c)&&(p[c]=a[c]);p.originalType=e,p.mdxType="string"==typeof e?e:n,i[1]=p;for(var o=2;o<l;o++)i[o]=t[o];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},125:function(e,a,t){"use strict";var n=t(0),r=t.n(n);a.a=({src:e,alt:a,title:t})=>r.a.createElement("div",{className:"imageContainer"},r.a.createElement("div",{className:"center"},r.a.createElement("img",{src:e,alt:a})),r.a.createElement("div",{className:"center"},t))},94:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return p})),t.d(a,"metadata",(function(){return c})),t.d(a,"toc",(function(){return o})),t.d(a,"default",(function(){return b}));var n=t(3),r=t(7),l=(t(0),t(123)),i=t(125),p={slug:"basic-example-laravel-graphql",title:"Basic example Laravel + GraphQL",tags:["php","laravel","graphql"],image:"https://cdn-images-1.medium.com/max/1600/1*6UZ-T5DS_OuxnWoEND8QSw.png"},c={permalink:"/blog/basic-example-laravel-graphql",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/blog/blog/2020-08-27-basic-example-laravel-graphql.mdx",source:"@site/blog/2020-08-27-basic-example-laravel-graphql.mdx",description:"Laravel GraphQL is a implementation of GraphQL with PHP for Laravel. Very easy to install and use. So the plan in this post is to create langs query and see it in Graphiql.",date:"2020-08-27T00:00:00.000Z",tags:[{label:"php",permalink:"/blog/tags/php"},{label:"laravel",permalink:"/blog/tags/laravel"},{label:"graphql",permalink:"/blog/tags/graphql"}],title:"Basic example Laravel + GraphQL",readingTime:2.23,truncated:!0,prevItem:{title:"Testing a Laravel GraphQL Query",permalink:"/blog/testing-laravel-graphql-query"},nextItem:{title:"Private and Different Layouts with React Router",permalink:"/blog/private-different-layouts-with-react-router"}},o=[{value:"1. Install library:",id:"1-install-library",children:[]},{value:"2. Create the migration and the model:",id:"2-create-the-migration-and-the-model",children:[{value:"Create the Migration",id:"create-the-migration",children:[]},{value:"Create the Model",id:"create-the-model",children:[]}]},{value:"3. Create the GraphQL Lang Type",id:"3-create-the-graphql-lang-type",children:[]},{value:"4. Create the query",id:"4-create-the-query",children:[]},{value:"5. Add the query and type to the config file",id:"5-add-the-query-and-type-to-the-config-file",children:[]}],s={toc:o};function b(e){var a=e.components,t=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},s,t,{components:a,mdxType:"MDXLayout"}),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/rebing/graphql-laravel"}),"Laravel GraphQL")," is a implementation of GraphQL with PHP for Laravel. Very easy to install and use. So the plan in this post is to create ",Object(l.b)("inlineCode",{parentName:"p"},"langs")," query and see it in Graphiql."),Object(l.b)(i.a,{src:"https://cdn-images-1.medium.com/max/1600/1*6UZ-T5DS_OuxnWoEND8QSw.png",alt:"Langs query working in Laravel GraphQL library",title:"Langs query working in Laravel GraphQL library",mdxType:"Image"}),Object(l.b)("h2",{id:"1-install-library"},"1. Install library:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/rebing/graphql-laravel"}),"Laravel GraphQL")," library.")),Object(l.b)("h2",{id:"2-create-the-migration-and-the-model"},"2. Create the migration and the model:"),Object(l.b)("h3",{id:"create-the-migration"},"Create the Migration"),Object(l.b)("p",null,"I'm using PostgreSQL."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"// database/migrations/2014_02_24_195921_Lang.php\n\nSchema::create('lang.lang', function (Blueprint $table) {\n    $table->string('lang_id', 50)->primary();\n    $table->string('name')->unique();\n    $table->string('local_name')->unique();\n    $table->boolean('active')->default(false);\n    $table->boolean('is_blocked')->default(false);\n\n    $table->integer('created_by')->nullable();\n    $table->integer('updated_by')->nullable();\n    $table->timestamp('created_at')->default(DB::raw('CURRENT_TIMESTAMP'));\n    $table->timestamp('updated_at')->default(DB::raw('CURRENT_TIMESTAMP'));\n});\n\nDB::table($this->tableName)->insert([\n    ['lang_id' => 'EN', 'name' => 'English', 'local_name' => 'English', 'active' => true],\n    ['lang_id' => 'ES', 'name' => 'Spanish', 'local_name' => 'Espa\xf1ol', 'active' => true],\n]);\n")),Object(l.b)("h3",{id:"create-the-model"},"Create the Model"),Object(l.b)("p",null,"I created the class BaseModel to save the ",Object(l.b)("inlineCode",{parentName:"p"},"created_by")," and ",Object(l.b)("inlineCode",{parentName:"p"},"updated_by")," fields in the database."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"// app/Base/Model/Lang/Lang.php\n\nclass Lang extends BaseModel\n{\n    public $incrementing = false;\n\n    protected $table = 'lang.lang';\n\n    protected $primaryKey = 'lang_id';\n\n    protected $fillable = [\n        'lang_id',\n        'name',\n        'local_name',\n        'active',\n        'is_blocked',\n        'created_by',\n    ];\n}\n")),Object(l.b)("h2",{id:"3-create-the-graphql-lang-type"},"3. Create the GraphQL Lang Type"),Object(l.b)("p",null,"This file has the columns to return as the JSON variables. You can see ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/albertcito/laravel-graphql-api/blob/master/app/Base/GraphQL/Type/LangType.php"}),"whole file")," in github."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"// app/Base/GraphQL/Type/LangType.php\n\nprotected $attributes = [\n    'name'        => 'LangType',\n    'description' => 'A Lang type',\n];\n\npublic function fields() : array\n{\n    return [\n        'langID'    => [\n            'type'        => Type::nonNull(Type::string()),\n            'description' => 'The lang ID',\n            'alias' => 'lang_id',\n        ],\n        'name'      => [\n            'type'        => Type::nonNull(Type::string()),\n            'description' => 'The lang name (english, spanish...)',\n        ],\n        ...\n    ];\n}\n")),Object(l.b)("h2",{id:"4-create-the-query"},"4. Create the query"),Object(l.b)("p",null,"This is the basic example to return all the columns of the ",Object(l.b)("inlineCode",{parentName:"p"},"lang.lang")," table."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"class LangsQuery extends Query\n{\n    protected $attributes = [\n        'name'        => 'langs',\n        'description' => 'A query to get the Langs',\n    ];\n\n    public function type(): Type\n    {\n        return GraphQL::listOf('LangType');\n    }\n\n    public function args(): array\n    {\n        return [];\n    }\n\n    public function resolve($root, array $args)\n    {\n        return Lang::all();\n    }\n}\n")),Object(l.b)("h2",{id:"5-add-the-query-and-type-to-the-config-file"},"5. Add the query and type to the config file"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"// config/graphql.php\n...\n'schemas' => [\n    'default' => [\n        'query' => [\n            App\\Base\\GraphQL\\Publics\\Query\\LangsQuery::class,\n        ],\n        'mutation' => [],\n        'middleware' => [],\n        'method' => ['get', 'post'],\n    ],\n],\n'types' => [\n    \\App\\Base\\GraphQL\\Type\\LangType::class,\n]\n...\n")),Object(l.b)("p",null,"Now you can go to ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"http://127.0.0.1:8000/graphiql/"}),"http://127.0.0.1:8000/graphiql/")," and run the query and see the DB values in JSON format."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"{\n  langs {\n    langID\n    name\n    localName\n    active \n  }\n}\n")),Object(l.b)("p",null,"This is a very basic query. To make it better you have to work with the arguments and pagination. I already did it, so if you go to my ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/albertcito/laravel-graphql-api"}),"laravel-graphql-api")," repository you can see it. If you would like to see it live please go ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://laravel-graphql-api.herokuapp.com/graphiql"}),"here"),"."))}b.isMDXComponent=!0}}]);