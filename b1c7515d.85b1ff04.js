(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{69:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return p})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return o})),t.d(n,"default",(function(){return u}));var r=t(2),a=t(6),i=(t(0),t(81)),s=t(82),p={id:"authentication-laravel-graphql-1",title:"Authentication Laravel + GraphQL",tags:["php","laravel","graphql"],image:"https://cdn-images-1.medium.com/max/1600/1*7rphbEOTnUamQqNErlKs0g.png"},l={permalink:"/blog/authentication-laravel-graphql-1",source:"@site/blog/2020-08-31-authentication-laravel-graphql.mdx",description:"In my previous post I publish a basic example with Laravel + GraphQL. The current post is to create the login query.",date:"2020-08-31T00:00:00.000Z",tags:[{label:"php",permalink:"/blog/tags/php"},{label:"laravel",permalink:"/blog/tags/laravel"},{label:"graphql",permalink:"/blog/tags/graphql"}],title:"Authentication Laravel + GraphQL",truncated:!0,nextItem:{title:"Testing a Laravel GraphQL Query",permalink:"/blog/testing-laravel-graphql-query"}},o=[{value:"1. Create the UserType",id:"1-create-the-usertype",children:[]},{value:"2. Create the login query",id:"2-create-the-login-query",children:[]},{value:"The Login class",id:"the-login-class",children:[]}],c={rightToc:o};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"In my ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/blog/basic-example-laravel-graphql"}),"previous post")," I publish a basic example with Laravel + GraphQL. The current post is to create the login query."),Object(i.b)(s.a,{src:"https://cdn-images-1.medium.com/max/1600/1*7rphbEOTnUamQqNErlKs0g.png",alt:"Authentication Laravel + GraphQL",title:"Authentication Laravel + GraphQL",mdxType:"Image"}),Object(i.b)("h2",{id:"1-create-the-usertype"},"1. Create the UserType"),Object(i.b)("p",null,"I'm working with ",Object(i.b)("inlineCode",{parentName:"p"},"user_id")," as primary key for the ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/albertcito/laravel-graphql-api/blob/master/database/migrations/2014_10_12_000000_User.php"}),"table user"),". So, the first step is create the GraphQL ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/albertcito/laravel-graphql-api/blob/master/app/Base/GraphQL/Type/UserType.php"}),"UserType"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-php"}),"// app/Base/GraphQL/Type/UserType.php\n\nclass UserType extends GraphQLType\n{\n    protected $attributes = [\n        'name'        => 'UserType',\n        'description' => 'A type of User',\n    ];\n\n    public function fields() : array\n    {\n        return [\n            'userID'        => [\n                'type'        => Type::nonNull(Type::int()),\n                'description' => 'User identification, primary key',\n                'alias' => 'user_id',\n            ],\n            'langID'        => [\n                'type'        => Type::nonNull(Type::string()),\n                'description' => 'User language',\n                'alias' => 'lang_id',\n            ],\n            'name'          => [\n                'type'        => Type::nonNull(Type::string()),\n                'rules'       => ['min:3'],\n                'description' => 'User name',\n            ],\n            'email'         => [\n                'type'        => Type::nonNull(Type::string()),\n                'rules'       => ['min:3'],\n                'description' => 'User email',\n            ],\n            'accessToken'   => [\n                'type'        => Type::string(),\n                'description' => 'Session api token passport',\n            ],\n            ...\n        ];\n    }\n}\n")),Object(i.b)("h2",{id:"2-create-the-login-query"},"2. Create the login query"),Object(i.b)("p",null,"This query receive two params ",Object(i.b)("inlineCode",{parentName:"p"},"email")," and ",Object(i.b)("inlineCode",{parentName:"p"},"password"),". And return the user DB values + accesToken."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-php"}),"// app/Base/GraphQL/Publics/Query/UserLoginQuery.php\n\nclass UserLoginQuery extends Query\n{\n    protected $attributes = [\n        'name'        => 'login',\n        'description' => 'A query to login a user, return a user + accessToken',\n    ];\n\n    public function type(): Type\n    {\n        return GraphQL::type('UserType');\n    }\n\n    public function args(): array\n    {\n        return [\n            'email'    => [\n                'name'  => 'email',\n                'type'  => Type::string(),\n                'rules' => [\n                    'required',\n                    'email',\n                ],\n            ],\n            'password' => [\n                'name'  => 'password',\n                'type'  => Type::string(),\n                'rules' => [\n                    'required',\n                    'string',\n                ],\n            ],\n        ];\n    }\n\n    public function resolve($root, $args)\n    {\n        return (new LoginLogic(\n            $args['email'],\n            $args['password']\n        ))->login();\n    }\n}\n\n")),Object(i.b)("h2",{id:"the-login-class"},"The Login class"),Object(i.b)("p",null,"This is a basic login class, in the ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/albertcito/laravel-graphql-api"}),"code")," it was optimized to make it more scalable."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-php"}),"// app/Base/Logic/User/LoginLogic.php\n\nclass LoginLogic\n{\n    private string $email;\n    private string $password;\n\n    public function __construct(string $email, string $password)\n    {\n        $this->email = $email;\n        $this->password = $password;\n    }\n\n    public function login()\n    {\n        if (Auth::check()) {\n            throw new MessageError(__('user.logged_already'));\n        }\n\n        $user = User::where(['email' => $this->email])->first();\n\n        if (! $user || ! Hash::check($this->password, $user->password)) {\n            throw new MessageError(__('user.login_wrong'));\n        }\n\n        if (! UserStatus::ACTIVE()->isEqual($user->user_status_id)) {\n            throw new MessageError(__('user.no_active'));\n        }\n\n        $user['accessToken'] = $user->createToken('Albertcito.com')->accessToken;\n\n        return $user;\n    }\n}\n")),Object(i.b)("p",null,"Now you can go to ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"http://127.0.0.1:8000/graphiql/"}),"http://127.0.0.1:8000/graphiql/")," and run the query and see the DB values in JSON format."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-graphql"}),"query login($email: String, $password: String) {\n  login(email: $email, password: $password) {\n    userID\n    name\n    accessToken\n  }\n}\n")),Object(i.b)("p",null,"This is just a login query. I will post soon how to use it. If you would like to see the code, please go to my ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/albertcito/laravel-graphql-api"}),"github"),"."))}u.isMDXComponent=!0},81:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return h}));var r=t(0),a=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=a.a.createContext({}),c=function(e){var n=a.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},u=function(e){var n=c(e.components);return a.a.createElement(o.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},g=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),u=c(t),g=r,h=u["".concat(s,".").concat(g)]||u[g]||b[g]||i;return t?a.a.createElement(h,p(p({ref:n},o),{},{components:t})):a.a.createElement(h,p({ref:n},o))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=g;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,s[1]=p;for(var o=2;o<i;o++)s[o]=t[o];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},82:function(e,n,t){"use strict";var r=t(0),a=t.n(r);n.a=({src:e,alt:n,title:t})=>a.a.createElement("div",{className:"imageContainer"},a.a.createElement("div",{className:"center"},a.a.createElement("img",{src:e,alt:n})),a.a.createElement("div",{className:"center"},t))}}]);