(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{123:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return g}));var r=n(0),a=n.n(r);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=a.a.createContext({}),c=function(e){var t=a.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},u=function(e){var t=c(e.components);return a.a.createElement(o.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,g=u["".concat(i,".").concat(m)]||u[m]||b[m]||s;return n?a.a.createElement(g,p(p({ref:t},o),{},{components:n})):a.a.createElement(g,p({ref:t},o))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var o=2;o<s;o++)i[o]=n[o];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},125:function(e,t,n){"use strict";var r=n(0),a=n.n(r);t.a=({src:e,alt:t,title:n})=>a.a.createElement("div",{className:"imageContainer"},a.a.createElement("div",{className:"center"},a.a.createElement("img",{src:e,alt:t})),a.a.createElement("div",{className:"center"},n))},92:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return p})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(7),s=(n(0),n(123)),i=n(125),p={slug:"testing-laravel-graphql-query",title:"Testing a Laravel GraphQL Query",tags:["php","laravel","graphql","php-testing"],image:"https://cdn-images-1.medium.com/max/1600/1*CjV19FmP2ekRXsnFnkMoPw.png"},l={permalink:"/blog/testing-laravel-graphql-query",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/blog/blog/2020-08-28-testing-graphql-query.mdx",source:"@site/blog/2020-08-28-testing-graphql-query.mdx",description:"In this post I'm going to set up the environment to test the queries and mutations, and test the langs query. It's the same query created in the previous post Basic example Laravel + GraphQL.",date:"2020-08-28T00:00:00.000Z",tags:[{label:"php",permalink:"/blog/tags/php"},{label:"laravel",permalink:"/blog/tags/laravel"},{label:"graphql",permalink:"/blog/tags/graphql"},{label:"php-testing",permalink:"/blog/tags/php-testing"}],title:"Testing a Laravel GraphQL Query",readingTime:1.855,truncated:!0,prevItem:{title:"Authentication Laravel + GraphQL",permalink:"/blog/authentication-laravel-graphql-1"},nextItem:{title:"Basic example Laravel + GraphQL",permalink:"/blog/basic-example-laravel-graphql"}},o=[{value:"Configure TestCase",id:"configure-testcase",children:[{value:"Test public queries or mutations",id:"test-public-queries-or-mutations",children:[]},{value:"Test private queries or mutations",id:"test-private-queries-or-mutations",children:[]},{value:"Print the error if its fail",id:"print-the-error-if-its-fail",children:[]}]},{value:"Test LangQuery",id:"test-langquery",children:[]}],c={toc:o};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"In this post I'm going to set up the environment to test the queries and mutations, and test the ",Object(s.b)("inlineCode",{parentName:"p"},"langs")," query. It's the same query created in the previous post ",Object(s.b)("a",{parentName:"p",href:"/blog/basic-example-laravel-graphql"},"Basic example Laravel + GraphQL"),"."),Object(s.b)(i.a,{src:"https://cdn-images-1.medium.com/max/1600/1*CjV19FmP2ekRXsnFnkMoPw.png",alt:"Testing a Laravel GraphQL Query",title:"Testing a Laravel GraphQL Query",mdxType:"Image"}),Object(s.b)("h2",{id:"configure-testcase"},"Configure TestCase"),Object(s.b)("p",null,"In order to test a query o mutation I'll create three functions in the file ",Object(s.b)("a",{parentName:"p",href:"https://github.com/albertcito/laravel-graphql-api/blob/master/tests/TestCase.php"},"TestCase.php"),"."),Object(s.b)("h3",{id:"test-public-queries-or-mutations"},"Test public queries or mutations"),Object(s.b)("p",null,"To verify graphql public endpoint. "),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-php"},"// tests/TestCase.php\n\npublic function assertJsonStructure(\n    string $url,\n    array $params,\n    array $expected\n) {\n    $response = $this->json('post', $url, $params);\n    try {\n        $response->assertStatus(200)->assertJsonStructure($expected);\n    } catch (\\Exception $ex) {\n        $this->printDie($params, $expected, $ex, $response);\n    }\n}\n")),Object(s.b)("h3",{id:"test-private-queries-or-mutations"},"Test private queries or mutations"),Object(s.b)("p",null,"To verify graphql private endpoint, it need a user logged."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-php"},"// tests/TestCase.php\n\npublic function assertJsonStructureLogged(\n    string $url,\n    array $params,\n    array $expected,\n    $user = null\n) {\n    if (! $user) {\n        $user = UserUtil::actingAs();\n    }\n    $response = $this->actingAs($user)\n        ->json('post', $url, $params)\n        ->assertStatus(200);\n    try {\n        $response->assertJsonStructure($expected);\n    } catch (\\Exception $ex) {\n        $this->printDie($params, $expected, $ex, $response, $user->user_id);\n    }\n}\n")),Object(s.b)("h3",{id:"print-the-error-if-its-fail"},"Print the error if its fail"),Object(s.b)("p",null,"If a test fail, it's easy debug in this way. "),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-php"},"// tests/TestCase.php\n\nprivate function printDie($params, $expected, \\Exception $ex, $response, $user_id = null)\n{\n    $content = substr($response->getContent(), 0, 1500);\n    $trace = debug_backtrace();\n    $error = [\n        'class' => static::class.'::'.$trace[2]['function'],\n        'params' => $params,\n        'expected' => $expected,\n        'user' => $user_id,\n        'error' => $ex->toString(),\n        'content' => $content,\n    ];\n    dd($error);\n}\n")),Object(s.b)("h2",{id:"test-langquery"},"Test LangQuery"),Object(s.b)("p",null,"This is quere that I used as example in the post ",Object(s.b)("a",{parentName:"p",href:"/blog/basic-example-laravel-graphql"},"Basic example Laravel + GraphQL")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-php"},"// tests/Feature/Base/LangsQueryTest.php\n\nclass LangsQueryTest extends TestCase\n{\n    public function test()\n    {\n        $query = '{\n            langs {\n              data {\n                langID\n                name\n                localName\n                active\n              }\n            }\n        }';\n\n        $expected = [\n            'data' => [\n                'langs' => [\n                    'data' => [\n                        '*' => [\n                            'langID',\n                            'name',\n                            'localName',\n                            'active',\n                        ],\n                    ],\n                ],\n            ],\n        ];\n\n        $this->assertJsonStructure(\n            '/graphql',\n            [\n                'query' => $query,\n            ],\n            $expected\n        );\n    }\n}\n")),Object(s.b)("p",null,"And now, just run ",Object(s.b)("inlineCode",{parentName:"p"},"php artisan test")," to test it."),Object(s.b)("p",null,"If the query to test need authenticacion, you have to add the trail ",Object(s.b)("inlineCode",{parentName:"p"},"use WithoutMiddleware;")," from ",Object(s.b)("inlineCode",{parentName:"p"},"use Illuminate\\Foundation\\Testing\\WithoutMiddleware;"),". You may see the code ",Object(s.b)("a",{parentName:"p",href:"https://github.com/albertcito/laravel-graphql-api/blob/master/tests/Feature/Base/GraphQL/Admin/Query/Tag/TagsQueryTest.php"},"here"),". If you would like to see it live please go ",Object(s.b)("a",{parentName:"p",href:"https://laravel-graphql-api.herokuapp.com/graphiql"},"here"),"."))}u.isMDXComponent=!0}}]);